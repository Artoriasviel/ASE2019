    size_t bucket(int k) {
        return (k % hash_length);
    };
    hash_entry<key_type,data_type>* search(int k) {
        int index = bucket(k);
        hash_entry<key_type,data_type> *p = table[index];
        while (p) {
            if (p->key == k) break;
            p = p->next;
        }
        return p;
    };
    hash_entry<key_type, data_type> *insert(value_type v) {
        int index = bucket(v.first);
        hash_entry<key_type, data_type> *p = table[index];
        while (p) {
            if (p->key == v.first) return NULL;
            p = p->next;
        }
        p = new hash_entry<key_type, data_type>;
        p->key = v.first;
        p->value = v;
        p->next = table[index];
        table[index] = p;
        return p;
    };
    int erase(int k) {
        size_t n = 0;
        size_t index = bucket(k);

        hash_entry<key_type,data_type> *curr = table[index], *prev;
        prev = curr;
        while (curr) {
            if (curr->key == k) {
                n++;
               if (curr == table[index]) {
                    table[index] = curr->next;
                    delete curr;
                    curr = prev = table[index];
                } else {
                    prev->next = curr->next;
                    delete curr;
                    curr = prev->next;
                }
            } else {
                prev = curr;
                curr = curr->next;
            }
        }
        return n;
    };
    bool empty() {
        int i;
        bool res = true;
        hash_entry<key_type,data_type> *e;
        for (i = 0; i < hash_length; i ++) {
            if (table[i] != NULL) {
                e = table[i];
                res = false;
            }
        }
        return res;
    };
