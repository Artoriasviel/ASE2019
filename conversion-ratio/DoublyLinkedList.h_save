#include "TATAS.h"
#include <vector>
#include <queue>
#include <cstring>

#ifndef DOUBLYLINKEDLIST_H
#define DOUBLYLINKEDLIST_H
#include <stdlib.h>
#include <assert.h>
#include <iostream>
template <class T>
class DoublyLinkedListWrap  
  ;
template <class T>
class DoublyLinkedEntryWrap  
  {
    T* o;
    DoublyLinkedEntryWrap<T>* next;DoublyLinkedEntryWrap<T>* prev;
    public:
    DoublyLinkedEntryWrap () : o(0),next(0),prev(0) {
       
    }
    DoublyLinkedEntryWrap (const T& _o) : o(new T (_o)),next(0),prev(0) {
       
    }
    ~DoublyLinkedEntryWrap() {
       if (o!=0)
         {
            delete o;
         }
    }
    T& GetEntry() {
       return *o;
    }
    friend class DoublyLinkedListWrap<T>;
  };
template <class T>
class DoublyLinkedListWrap  
  {
    DoublyLinkedEntryWrap<T> head;
    unsigned count;
    public:
    public:
    DoublyLinkedListWrap () : count(0) {
       head.prev = head.next = &head;
    }
    public:
    DoublyLinkedListWrap (const DoublyLinkedListWrap<T>& that) : count(0) {
       head.prev = head.next = &head;
       for (iterator iter(that) ; !iter.ReachEnd(); iter++)
         {
            T& c=iter.Current();
            AppendLast(c);
         }
    }
    ~DoublyLinkedListWrap() {
       DeleteAll();
    }
    DoublyLinkedEntryWrap<T>* AppendLast(const T& o) {
       DoublyLinkedEntryWrap<T>* e=new DoublyLinkedEntryWrap<T> (o);
       assert((e->prev==0&&e->next==0)&&e->o!=0);
       DoublyLinkedEntryWrap<T>* _b2_pos=(DoublyLinkedEntryWrap<T>*)(-1);
       {
         AcquireLock acq(lock1);
       
       _b2_pos = head.prev;
       e->prev = _b2_pos;
       e->next = _b2_pos->next;
       ++count;
       _b2_pos->next->prev = e;
       _b2_pos->next = e;
        }
       return e;
    }
    DoublyLinkedEntryWrap<T>* PushFirst(const T& o) {
       DoublyLinkedEntryWrap<T>* e=new DoublyLinkedEntryWrap<T> (o);
       assert((e->prev==0&&e->next==0)&&e->o!=0);
       DoublyLinkedEntryWrap<T>* _b4_pos=(DoublyLinkedEntryWrap<T>*)(-1);
       {
         AcquireLock acq(lock1);
       
       _b4_pos = head.next;
       e->next = _b4_pos;
       e->prev = _b4_pos->prev;
       ++count;
       _b4_pos->prev->next = e;
       _b4_pos->prev = e;
        }
       return e;
    }
    DoublyLinkedEntryWrap<T>* PopFirst() {
       DoublyLinkedEntryWrap<T>* e=(DoublyLinkedEntryWrap<T>*)(-1);
       DoublyLinkedEntryWrap<T>* _b8_r=(DoublyLinkedEntryWrap<T>*)(-1);
       {
         AcquireLock acq(lock1);
       
       _b8_r = count==0?0:head.next;
       assert(_b8_r==0||_b8_r->o!=0);
       e = _b8_r;
       if (e!=0)
         {
            --count;
            if (e->prev!=0)
              {
                 e->prev->next = e->next;
              }
            if (e->next!=0)
              {
                 e->next->prev = e->prev;
              }
            e->prev = e->next = 0;
         }
        }
       return e;
    }
    void push_front(const T& o) {
       DoublyLinkedEntryWrap<T>* _b11_e=new DoublyLinkedEntryWrap<T> (o);
       assert((_b11_e->prev==0&&_b11_e->next==0)&&_b11_e->o!=0);
       DoublyLinkedEntryWrap<T>* _b11_pos=(DoublyLinkedEntryWrap<T>*)(-1);
       {
         AcquireLock acq(lock1);
       
       _b11_pos = head.next;
       _b11_e->next = _b11_pos;
       _b11_e->prev = _b11_pos->prev;
       ++count;
       _b11_pos->prev->next = _b11_e;
       _b11_pos->prev = _b11_e;
        }
    }
    void DeleteAll() {
       
       {
         AcquireLock acq(lock1);
       
       while (count)
         {
            DoublyLinkedEntryWrap<T>* e=head.next;
            {
               --count;
               if (e->prev!=0)
                 {
                    e->prev->next = e->next;
                 }
               if (e->next!=0)
                 {
                    e->next->prev = e->prev;
                 }
               e->prev = e->next = 0;
            }
            
         }
        }
    }
    void clear() {
       
       {
         AcquireLock acq(lock1);
       
       while (count)
         {
            DoublyLinkedEntryWrap<T>* _b26_e=head.next;
            {
               --count;
               if (_b26_e->prev!=0)
                 {
                    _b26_e->prev->next = _b26_e->next;
                 }
               if (_b26_e->next!=0)
                 {
                    _b26_e->next->prev = _b26_e->prev;
                 }
               _b26_e->prev = _b26_e->next = 0;
            }
            
         }
        }
    }
    unsigned NumberOfEntries() const{
       unsigned __ret__24=(unsigned)(-1);
       {
         AcquireLock acq(lock1);
       
       __ret__24 = count;
        }
       return __ret__24;
    }
    unsigned size() const{
       unsigned __ret__27=(unsigned)(-1);
       {
         AcquireLock acq(lock1);
       
       __ret__27 = count;
        }
       return __ret__27;
    }
    DoublyLinkedEntryWrap<T>* First() const{
       DoublyLinkedEntryWrap<T>* r=(DoublyLinkedEntryWrap<T>*)(-1);
       DoublyLinkedEntryWrap<T>* __ret__29=(DoublyLinkedEntryWrap<T>*)(-1);
       {
         AcquireLock acq(lock1);
       
       r = count==0?0:head.next;
       assert(r==0||r->o!=0);
       __ret__29 = r;
        }
       return __ret__29;
    }
    DoublyLinkedEntryWrap<T>* Last() const{
       DoublyLinkedEntryWrap<T>* r=(DoublyLinkedEntryWrap<T>*)(-1);
       DoublyLinkedEntryWrap<T>* __ret__31=(DoublyLinkedEntryWrap<T>*)(-1);
       {
         AcquireLock acq(lock1);
       
       r = count==0?0:head.prev;
       assert(r==0||r->o!=0);
       __ret__31 = r;
        }
       return __ret__31;
    }
    DoublyLinkedEntryWrap<T>* Next(const DoublyLinkedEntryWrap<T>* cur) const{
       DoublyLinkedEntryWrap<T>* r=(DoublyLinkedEntryWrap<T>*)(-1);
       DoublyLinkedEntryWrap<T>* __ret__33=(DoublyLinkedEntryWrap<T>*)(-1);
       {
         AcquireLock acq(lock1);
       
       r = cur==head.prev?0:cur->next;
       assert(r==0||r->o!=0);
       __ret__33 = r;
        }
       return __ret__33;
    }
    DoublyLinkedEntryWrap<T>* Prev(DoublyLinkedEntryWrap<T>* cur) const{
       DoublyLinkedEntryWrap<T>* r=(DoublyLinkedEntryWrap<T>*)(-1);
       DoublyLinkedEntryWrap<T>* __ret__35=(DoublyLinkedEntryWrap<T>*)(-1);
       {
         AcquireLock acq(lock1);
       
       r = cur==head.next?0:cur->prev;
       assert(r==0||r->o!=0);
       __ret__35 = r;
        }
       return __ret__35;
    }
    void Reverse() {
       int __ret__36=0;
       
       {
         AcquireLock acq(lock1);
       
       if (count==0)
         {
            __ret__36 = 1;
         }
       if (__ret__36!=1)
         {
            DoublyLinkedEntryWrap<T>* tmp=&head;
            DoublyLinkedEntryWrap<T>* tmp1=tmp->next;
            head.next = head.prev;
            head.prev = tmp1;
            while (tmp!=head.next)
              {
                 DoublyLinkedEntryWrap<T>* tmp2=tmp;
                 tmp = tmp1;
                 tmp1 = tmp1->next;
                 tmp->next = tmp2;
                 tmp->prev = tmp1;
              }
         }
        }
       return ;
    }
    class Iterator  
      {
        const DoublyLinkedListWrap<T>* list;
        DoublyLinkedEntryWrap<T>* cur;
        public:
        public:
        Iterator (const DoublyLinkedListWrap<T>& l) : list(&l) {
           cur = l.First();
        }
        public:
        Iterator (const DoublyLinkedListWrap<T>& l,DoublyLinkedEntryWrap<T>* c) : list(&l),cur(c) {
           
        }
        bool operator ==(const Iterator& that) const{
           return list==that.list&&cur==that.cur;
        }
        bool operator !=(const Iterator& that) const{
           return !operator ==(that);
        }
        public:
        Iterator (const Iterator& that) : list(that.list),cur(that.cur) {
           
        }
        public:
        Iterator () : list(0),cur(0) {
           
        }
        DoublyLinkedEntryWrap<T>* CurrentPtr() const{
           return cur;
        }
        bool ReachEnd() const{
           return cur==0;
        }
        void Reset() {
           if (list!=0)
             {
                cur = (list->First)();
             }
        }
        void Advance() {
           if (cur!=0)
             {
                cur = (list->Next)(cur);
             }
        }
        void operator ++() {
           Advance();
        }
        void operator ++(int) {
           Advance();
        }
      };
    class const_iterator : public Iterator 
      {
        public:
        using Iterator::CurrentPtr
        ;
        public:
        const_iterator (const Iterator& that) : Iterator(that) {
           
        }
        public:
        const_iterator () : Iterator() {
           
        }
        public:
        const_iterator (const DoublyLinkedListWrap<T>& l) : Iterator(l) {
           
        }
        public:
        const_iterator (const DoublyLinkedListWrap<T>& l,DoublyLinkedEntryWrap<T>* c) : Iterator(l,c) {
           
        }
        bool operator ==(const const_iterator& that) const{
           return Iterator::operator ==(that);
        }
        bool operator !=(const const_iterator& that) const{
           return !operator ==(that);
        }
        const T& Current() const{
           return CurrentPtr()->GetEntry();
        }
        const T& operator *() const{
           return Current();
        }
      };
    class iterator : public Iterator 
      {
        public:
        using Iterator::CurrentPtr
        ;
        public:
        iterator (const Iterator& that) : Iterator(that) {
           
        }
        public:
        iterator () : Iterator() {
           
        }
        public:
        iterator (const DoublyLinkedListWrap<T>& l) : Iterator(l) {
           
        }
        public:
        iterator (const DoublyLinkedListWrap<T>& l,DoublyLinkedEntryWrap<T>* c) : Iterator(l,c) {
           
        }
        bool operator ==(const iterator& that) const{
           return Iterator::operator ==(that);
        }
        bool operator !=(const iterator& that) const{
           return !operator ==(that);
        }
        T& Current() const{
           return CurrentPtr()->GetEntry();
        }
        T& operator *() const{
           return Current();
        }
      };
    void push_back(const T& o) {
       DoublyLinkedEntryWrap<T>* _b35_e=new DoublyLinkedEntryWrap<T> (o);
       assert((_b35_e->prev==0&&_b35_e->next==0)&&_b35_e->o!=0);
       DoublyLinkedEntryWrap<T>* _b35_pos=(DoublyLinkedEntryWrap<T>*)(-1);
       {
         AcquireLock acq(lock1);
       
       _b35_pos = head.prev;
       _b35_e->prev = _b35_pos;
       _b35_e->next = _b35_pos->next;
       ++count;
       _b35_pos->next->prev = _b35_e;
       _b35_pos->next = _b35_e;
        }
    }
    private:
    mutable TATAS lock1;
  };
#endif
